//                           +------+
//                           | Init |---------------+
//                           +------+               |
//                              |                   |
//                              V                   |
// +--------------+         +----------+            |
// |              |-------->| Buffer 1 |-------+    |
// |              |         +----------+       V    V
// |              |        buffer select    +----------------------------+     +------+
// | Calculations |<----------------------->| Buffer Controller / Sender |---->| fifo |
// |              |                         +----------------------------+     +------+
// |              |         +----------+       ^            ^
// |              |-------->| Buffer 2 |-------+            +------init_done
// +--------------+         +----------+

module life_logic #(
  CLK_FREQ = 50000000 : CLK_FREQ > 0, // clock frequency
  FPS = 1
  )(
    input clk,  // clock
    input rst,  // reset
    input init_done,
    input wr_full,
    output wr_valid,
    output fifoIn[9],
    output state[8]
  ) {

  .clk(clk) {
    .rst(rst) {
      dff bufferSel[2]; // Refers to the buffer currently being read&sent to fifo, 0 - calculation should wait; 1,2 - buf1/buf2
      dff prevBufSel[2];
      dff bufferSendCtr[9];
      dff fpsCtr[$clog2(CLK_FREQ/FPS+1)];
      dff calcCtr[4];
      dff cells[9][8];
      dff calcRaddr[3][9];
      dff calcWaddr[9];
      dff outCell[8];
      dff colCtr[7];
      dff lineCtr[3];
      dff calcDone; // Signals to sender that calculations are done
      dff prevFull;
      dff prevData[8];
      fsm calcstate = {INIT, LINEBEGIN, READ, CALC, WRITE, WAIT};
      fsm sendstate = {INIT, SEND_XYPOS, SEND, FPS};
    }
  }

  screenBuf buf1(.clka(clk), .clkb(clk));
  screenBuf buf2(.clka(clk), .clkb(clk));
  
  sig initAddr[3][9];
  sig calcAddr[9];
  sig dout[8];
  sig cellCount[4];
  sig newCell;
  
  // Calc loop
  always {
    buf1.wea = 0;
    buf2.wea = 0;
    buf1.dina = outCell.q;
    buf2.dina = outCell.q;
    calcAddr = 0;
    calcDone.d = 0;
    prevBufSel.d = bufferSel.q;
    calcCtr.d = 0;

    //state = 0;
    
    if(bufferSel.q == 1)
      dout = buf1.douta;
    else
      dout = buf2.douta;
    
    case(lineCtr.q) {
      0:
        initAddr[0] = 503;
        initAddr[1] = 83;
        initAddr[2] = 167;
      1:
        initAddr[0] = 83;
        initAddr[1] = 167;
        initAddr[2] = 251;
      2:
        initAddr[0] = 167;
        initAddr[1] = 251;
        initAddr[2] = 335;
      3:
        initAddr[0] = 251;
        initAddr[1] = 335;
        initAddr[2] = 419;
      4:
        initAddr[0] = 335;
        initAddr[1] = 419;
        initAddr[2] = 503;
      5:
        initAddr[0] = 419;
        initAddr[1] = 503;
        initAddr[2] = 83;
      default: // Same as zero
        initAddr[0] = 503;
        initAddr[1] = 83;
        initAddr[2] = 167;
    }
    
    case(calcstate.q) {
      calcstate.INIT: // Wait for a valid buffer
        //state = 1;
        calcDone.d = 1;
        calcstate.d = calcstate.INIT;
        //if(bufferSel.q != 0 && init_done)
          //calcstate.d = calcstate.LINEBEGIN;
        
      calcstate.LINEBEGIN: // Read first 6 bytes so the read state can always read just 3
        //state = 2;
        calcCtr.d = calcCtr.q + 1;
        if(calcCtr.q == 0)
          calcAddr = initAddr[0];
        if(calcCtr.q == 1) {
          calcAddr = initAddr[1];
          cells.d[0] = dout;
        }
        if(calcCtr.q == 2) {
          calcAddr = initAddr[2];
          cells.d[1] = dout;
        }
        if(calcCtr.q == 3) {
          calcAddr = initAddr[0] - 83;
          calcRaddr.d[0] = calcAddr;
          cells.d[2] = dout;
        }
        if(calcCtr.q == 4) {
          calcAddr = initAddr[1] - 83;
          calcRaddr.d[1] = calcAddr;
          cells.d[3] = dout;
        }
        if(calcCtr.q == 5) {
          calcAddr = initAddr[2] - 83;
          calcRaddr.d[2] = calcAddr;
          cells.d[4] = dout;
        }
        if(calcCtr.q == 6) {
          cells.d[5] = dout;
          calcstate.d = calcstate.READ;
        }
        
      calcstate.READ:
        //state = 4;
        calcCtr.d = calcCtr.q + 1;
        if(calcCtr.q == 0) {
          calcAddr = calcRaddr.q[0] + 1;
          calcRaddr.d[0] = calcRaddr.q[0] + 1;
          if(calcRaddr.q[0] == initAddr[0])
            calcRaddr.d[0] = initAddr[0] - 83;
        }
        if(calcCtr.q == 1) {
          calcAddr = calcRaddr.q[1] + 1;
          calcRaddr.d[1] = calcRaddr.q[1] + 1;
          if(calcRaddr.q[1] == initAddr[1])
            calcRaddr.d[1] = initAddr[1] - 83;
          cells.d[6] = dout;
        }
        if(calcCtr.q == 2) {
          calcAddr = calcRaddr.q[2] + 1;
          calcRaddr.d[2] = calcRaddr.q[2] + 1;
          if(calcRaddr.q[2] == initAddr[2])
            calcRaddr.d[2] = initAddr[2] - 83;
          cells.d[7] = dout;
        }
        if(calcCtr.q == 3) {
          cells.d[8] = dout;
          calcstate.d = calcstate.CALC;
        }
      
      calcstate.CALC:
        //state = 8;
        calcCtr.d = calcCtr.q + 1;
        cellCount = 0;
        newCell = 0;
        case(calcCtr.q) {
          0:
            newCell = cells.q[4][0];
            if(cells.q[0][7])
              cellCount = cellCount + 1;
            if(cells.q[1][0])
              cellCount = cellCount + 1;
            if(cells.q[1][1])
              cellCount = cellCount + 1;
            if(cells.q[3][7])
              cellCount = cellCount + 1;
            if(cells.q[4][1])
              cellCount = cellCount + 1;
            if(cells.q[6][7])
              cellCount = cellCount + 1;
            if(cells.q[7][0])
              cellCount = cellCount + 1;
            if(cells.q[7][1])
              cellCount = cellCount + 1;
            
          1:
            newCell = cells.q[4][1];
            if(cells.q[1][0])
              cellCount = cellCount + 1;
            if(cells.q[1][1])
              cellCount = cellCount + 1;
            if(cells.q[1][2])
              cellCount = cellCount + 1;
            if(cells.q[4][0])
              cellCount = cellCount + 1;
            if(cells.q[4][2])
              cellCount = cellCount + 1;
            if(cells.q[7][0])
              cellCount = cellCount + 1;
            if(cells.q[7][1])
              cellCount = cellCount + 1;
            if(cells.q[7][2])
              cellCount = cellCount + 1;
          
          2:
            newCell = cells.q[4][2];
            if(cells.q[1][1])
              cellCount = cellCount + 1;
            if(cells.q[1][2])
              cellCount = cellCount + 1;
            if(cells.q[1][3])
              cellCount = cellCount + 1;
            if(cells.q[4][1])
              cellCount = cellCount + 1;
            if(cells.q[4][3])
              cellCount = cellCount + 1;
            if(cells.q[7][1])
              cellCount = cellCount + 1;
            if(cells.q[7][2])
              cellCount = cellCount + 1;
            if(cells.q[7][3])
              cellCount = cellCount + 1;
            
          3:
            newCell = cells.q[4][3];
            if(cells.q[1][2])
              cellCount = cellCount + 1;
            if(cells.q[1][3])
              cellCount = cellCount + 1;
            if(cells.q[1][4])
              cellCount = cellCount + 1;
            if(cells.q[4][2])
              cellCount = cellCount + 1;
            if(cells.q[4][4])
              cellCount = cellCount + 1;
            if(cells.q[7][2])
              cellCount = cellCount + 1;
            if(cells.q[7][3])
              cellCount = cellCount + 1;
            if(cells.q[7][4])
              cellCount = cellCount + 1;
            
          4:
            newCell = cells.q[4][4];
            if(cells.q[1][3])
              cellCount = cellCount + 1;
            if(cells.q[1][4])
              cellCount = cellCount + 1;
            if(cells.q[1][5])
              cellCount = cellCount + 1;
            if(cells.q[4][3])
              cellCount = cellCount + 1;
            if(cells.q[4][5])
              cellCount = cellCount + 1;
            if(cells.q[7][3])
              cellCount = cellCount + 1;
            if(cells.q[7][4])
              cellCount = cellCount + 1;
            if(cells.q[7][5])
              cellCount = cellCount + 1;
            
          5:
            newCell = cells.q[4][5];
            if(cells.q[1][4])
              cellCount = cellCount + 1;
            if(cells.q[1][5])
              cellCount = cellCount + 1;
            if(cells.q[1][6])
              cellCount = cellCount + 1;
            if(cells.q[4][4])
              cellCount = cellCount + 1;
            if(cells.q[4][6])
              cellCount = cellCount + 1;
            if(cells.q[7][4])
              cellCount = cellCount + 1;
            if(cells.q[7][5])
              cellCount = cellCount + 1;
            if(cells.q[7][6])
              cellCount = cellCount + 1;
            
          6:
            newCell = cells.q[4][6];
            if(cells.q[1][5])
              cellCount = cellCount + 1;
            if(cells.q[1][6])
              cellCount = cellCount + 1;
            if(cells.q[1][7])
              cellCount = cellCount + 1;
            if(cells.q[4][5])
              cellCount = cellCount + 1;
            if(cells.q[4][7])
              cellCount = cellCount + 1;
            if(cells.q[7][5])
              cellCount = cellCount + 1;
            if(cells.q[7][6])
              cellCount = cellCount + 1;
            if(cells.q[7][7])
              cellCount = cellCount + 1;
            
          7:
            newCell = cells.q[4][7];
            if(cells.q[1][6])
              cellCount = cellCount + 1;
            if(cells.q[1][7])
              cellCount = cellCount + 1;
            if(cells.q[2][0])
              cellCount = cellCount + 1;
            if(cells.q[4][6])
              cellCount = cellCount + 1;
            if(cells.q[5][0])
              cellCount = cellCount + 1;
            if(cells.q[7][6])
              cellCount = cellCount + 1;
            if(cells.q[7][7])
              cellCount = cellCount + 1;
            if(cells.q[8][0])
              cellCount = cellCount + 1;
            
            calcstate.d = calcstate.WRITE;
            
          default:
            calcstate.d = calcstate.q;
        }
        
        if(cellCount < 2 || cellCount > 3)
          newCell = 0;
        if(cellCount == 3)
          newCell = 1;
        
        outCell.d[calcCtr.q] = newCell;
        
      calcstate.WRITE:
        //state = 16;
        colCtr.d = colCtr.q + 1;
        calcWaddr.d = calcWaddr.q + 1;
        calcAddr = calcWaddr.q;
        if(bufferSel.q == 2) {
          buf1.wea = 0;//1;
        }
        else {
          buf2.wea = 0;//1;
        }
        if(colCtr.q == 83) {
          lineCtr.d = lineCtr.q + 1;
          if(lineCtr.q == 5) {
            calcstate.d = calcstate.WAIT;
            lineCtr.d = 0;
          }
          else {
            calcstate.d = calcstate.LINEBEGIN;
            calcWaddr.d = 0;
          }
          colCtr.d = 0;
        }
        calcstate.d = calcstate.READ;
        
        cells.d[0] = cells.q[3];
        cells.d[1] = cells.q[4];
        cells.d[2] = cells.q[5];
        cells.d[3] = cells.q[6];
        cells.d[4] = cells.q[7];
        cells.d[5] = cells.q[8];
        
      calcstate.WAIT:
        //state = 32;
        calcDone.d = 1;
        if(prevBufSel.q != bufferSel.q) {
          calcstate.d = calcstate.LINEBEGIN;
        }
    }
    buf1.addra = calcAddr;
    buf2.addra = calcAddr;
  }
  
  sig sendAddr[9];
  sig sendDout[8];
  
  // Sender loop
  always {
    buf1.web = 0;
    buf2.web = 0;
    buf1.dinb = 8hxx;
    buf2.dinb = 8hxx;
    wr_valid = 0;
    fifoIn = 9bxxxxxxxxx;
    bufferSendCtr.d = bufferSendCtr.q + 1;
    fpsCtr.d = fpsCtr.q + 1;
    sendAddr = 0;
    prevFull.d = wr_full;
    
    if(bufferSel.q == 1)
      sendDout = buf1.doutb; // will be the value from previous cycle's address
    else
      sendDout = buf2.doutb; // will be the value from previous cycle's address

    state = 0;
    
    case(sendstate.q) {
      sendstate.INIT:
        fpsCtr.d = 0;
        sendAddr = bufferSendCtr.q;
        if(bufferSendCtr.q < 504) {
          buf1.web = 1;
          buf1.dinb = bufferSendCtr.q[7:0];//8h01; // Initialize to all 8b00000001's for now
          buf2.web = 1;
          buf2.dinb = 8h82; // Initialize to all 8b00000001's for now
        }
        else {
          if(init_done) {
            fpsCtr.d = 0;
            bufferSendCtr.d = 0;
            bufferSel.d = 1;
            sendstate.d = sendstate.SEND_XYPOS;
          }
          else {
            bufferSendCtr.d = 504; // Wait until init_done is true
          }
        }
        
      sendstate.SEND_XYPOS:
        if(!wr_full) {
          if(bufferSendCtr.q == 0)
            fifoIn = c{1b0, 8h20}; // Normal commands
          if(bufferSendCtr.q == 1)
            fifoIn = c{1b0, 8h80}; // X => 0
          if(bufferSendCtr.q == 2)
            fifoIn = c{1b0, 8h40}; // Y => 0
          if(bufferSendCtr.q < 3)
            wr_valid = 1;
          if(bufferSendCtr.q == 3) {
            bufferSendCtr.d = 0;
            sendstate.d = sendstate.SEND;
          }
        }
        else { // fifo full, stop counting
          bufferSendCtr.d = bufferSendCtr.q;
        }
        
      sendstate.SEND:
        sendAddr = bufferSendCtr.q;
        if(!wr_full) {
          if(bufferSendCtr.q <= 504 && bufferSendCtr.q != 0) {
            wr_valid = 1;
            if(prevFull.q) {
              bufferSendCtr.d = bufferSendCtr.q;
              fifoIn = c{1b1, prevData.q};
            }
            else {
              fifoIn = c{1b1, sendDout}; // will be the value from previous cycle's address
            }
          }
          if(bufferSendCtr.q > 504) {
            if(calcDone.q) {
              bufferSendCtr.d = 0;
              sendstate.d = sendstate.FPS;
            }
            else {
              bufferSendCtr.d = 505; // Should never happen because the calculation loop should be much faster than the serial comms
            }
          }
        }
        else { // fifo full, stop counting
          if(!prevFull.q)
            prevData.d = sendDout;
          bufferSendCtr.d = bufferSendCtr.q;
        }
        
      sendstate.FPS:
        bufferSendCtr.d = 0;
        if(fpsCtr.q == CLK_FREQ/FPS) {
          fpsCtr.d = 0;
          if(bufferSel.q == 1)
            bufferSel.d = 2;
          else
            bufferSel.d = 1;
          sendstate.d = sendstate.SEND_XYPOS;
        }
    }
    buf1.addrb = sendAddr;
    buf2.addrb = sendAddr;
  }
}
